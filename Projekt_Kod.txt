.. code:: ipython3

    import warnings
    warnings.filterwarnings("ignore")
    
    import numpy as np # algebra liniowa
    import pandas as pd # przetwarzanie danych
    import matplotlib.pyplot as plt # wykresy
    import pandas_profiling # generowanie raportów 
    
    import sklearn
    from sklearn.model_selection import train_test_split # data splitting
    import statsmodels.api as sm
    from sklearn import metrics
    from sklearn.linear_model import LinearRegression # Linear model
    
    import wordcloud
    
    from google.cloud import bigquery
    
    # utwórz obiekt "Client"
    client = bigquery.Client()
    
    # odniesienie do zbioru danych
    dataset_ref = client.dataset("stackoverflow", project="bigquery-public-data")
    
    # API request - pobierz zbiór danych
    dataset = client.get_dataset(dataset_ref)
    
    # List wszystkie tabele w zbiorze danych
    tables = list(client.list_tables(dataset))
    
    # Print nazw wszystkich tabel w zbiorze danych
    for table in tables:  
        print(table.table_id)

.. code:: ipython3

    # odniesienie do tabeli „posts_questions”
    table_ref = dataset_ref.table("posts_questions")
    
    # API request - pobierz tabele
    table = client.get_table(table_ref)
    
    # Wyświetl podgląd pierwszych 10 wierszy tabeli „posts_questions”
    client.list_rows(table, max_results=10).to_dataframe()

.. code:: ipython3

    # Znalezienie schematu tabeli zapytań, aby uzyskać więcej szczegółów na temat kolumn tabeli
    table.schema

.. code:: ipython3

    result = ["{0} {1}".format(schema.name,schema.field_type) for schema in table.schema]
    result

.. code:: ipython3

    # worldcloud
    query = """SELECT tags
             FROM `bigquery-public-data.stackoverflow.posts_questions`
             LIMIT 20000;
             """
    
    # konfiguracja zapytania
    queryx = client.query(query)
    # API request - uruchomienie zapytania i zwrócenie pandas DataFrame
    PostsCount = queryx.to_dataframe()
    tags = ' '.join(PostsCount.tags).lower()
    cloud = wordcloud.WordCloud(background_color='black',
                                max_font_size=200,
                                width=1600,
                                height=800,
                                max_words=300,
                                relative_scaling=.5).generate(tags)
    plt.figure(figsize=(20,10))
    plt.axis('off')
    plt.imshow(cloud);

.. code:: ipython3

    # usuwanie nieistotnych danych
    # zapytanie o rok i liczbę postów z tabeli 'posts_questions''
    query2 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >= 2012 and extract(year from creation_date) < 2022
            group by year
            order by year
            """
    
    
    queryx = client.query(query2)
    PostsCount  = queryx.to_dataframe()
    PostsCount 

.. code:: ipython3

    # zmiana typu danych kolumny „year” na typ „numeryczny”
    pd.to_numeric(PostsCount['year'])

.. code:: ipython3

    # przechowywanie zmienionych kolumn danych w nowych zmiennych
    year=PostsCount['year'].values.reshape(-1,1)
    posts=PostsCount['posts'].values.reshape(-1,1)
    # wykonywanie regresji liniowej w celu przewidywania przyszłych wartości przy użyciu danych z przeszłości
    reg = LinearRegression()
    # podział danych na train i test uzywając metody 'train_test_split()'
    X_train, X_test, y_train, y_test = train_test_split(year,posts,test_size=0.2,shuffle=False)
    # print(X_train)
    # print(X_test)
    # print(y_train)
    # print(y_test)
    # uczenie modelu za pomocą training data, a następnie użycie ich do przewidywania wartości test data
    reg.fit(X_train,y_train)
    predictions = reg.predict(X_test)
    print('Predicted values\n',predictions)

.. code:: ipython3

    # wizualizacja train i test data oraz predicted dla lepszego zrozumienia
    plt.scatter(X_train,y_train, color = "black")
    plt.scatter(X_test, y_test, color = "green")
    plt.plot(X_test, predictions, color = "red")
    plt.gca().legend(('Y-Predicted','Y-Train', 'Y-Test'))
    plt.title('Y-train and Y-test and Y-predicted')
    plt.xlabel('Year')
    plt.ylabel('Posts')
    plt.show()

.. code:: ipython3

    # wizualizacja test values i predicted values w celu sprawdzenia dokładności modelu
    plt.scatter(X_test, y_test, color = "green")
    plt.plot(X_test, predictions, color = "red")
    plt.gca().legend(('Y-Train','Y-Test'))
    plt.title('Y-test and Y-predicted')
    plt.xlabel('Year')
    plt.ylabel('Posts')
    plt.show()

.. code:: ipython3

    # znajdowanie odsetka postów związanych z tworzeniem stron internetowych
    # w stosunku do łącznej liczby postów każdego roku
    query3 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and (tags like '%bootstrap%' or 
            tags like '%typescript%' or tags like '%php%' or tags like '%html%' or tags like '%javascript%' or tags like '%css%' or tags like '%ruby%')
            group by year
            order by year
            """
    # konfiguracja zapytania
    queryx = client.query(query3)
    # API request - uruchomienie zapytania i zwrócenie pandas DataFrame
    WebDev_Posts = queryx.to_dataframe()
    WebDev_Posts['posts']= WebDev_Posts['posts']*100/PostsCount.posts
    WebDev_Posts

.. code:: ipython3

    pd.to_numeric(WebDev_Posts['year'])

.. code:: ipython3

    WebDevYear=WebDev_Posts['year'].values.reshape(-1,1)
    WebDevPosts=WebDev_Posts['posts'].values.reshape(-1,1)
    reg=LinearRegression()
    XWebDev_train, XWebDev_test, yWebDev_train, yWebDev_test = train_test_split(WebDevYear,WebDevPosts,test_size=0.2,shuffle=False)
    # print(XWebDev_train)
    # print(XWebDev_test)
    # print(yWebDev_train)
    # print(yWebDev_test)
    reg.fit(XWebDev_train,yWebDev_train)
    predictions = reg.predict(XWebDev_test)
    print('Predicted Values:\n',predictions)

.. code:: ipython3

    plt.scatter(XWebDev_train,yWebDev_train, color = "black")
    plt.scatter(XWebDev_test, yWebDev_test, color = "green")
    plt.plot(XWebDev_test, predictions, color = "red")
    plt.gca().legend(('Y-Predicted','Y-Train', 'Y-Test'))
    plt.title('WEB DEVELOPMENT')
    plt.xlabel('Year')
    plt.ylabel('Posts')
    plt.show()

.. code:: ipython3

    plt.scatter(XWebDev_test, yWebDev_test, color = "green")
    plt.plot(XWebDev_test, predictions, color = "red")
    plt.gca().legend(('Y-Train','Y-Test'))
    plt.title('Web Development')
    plt.xlabel('Year')
    plt.ylabel('Posts')
    plt.show()

.. code:: ipython3

    # znajdowanie procentu postów CSS w stosunku do łącznej liczby postów każdego roku
    query4 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%css%'
            group by year
            order by year
            """
    
    queryx = client.query(query4)
    CSSPosts = queryx.to_dataframe()
    CSSPosts['posts']= CSSPosts['posts']*100/PostsCount.posts
    pd.to_numeric(CSSPosts['year'])
    CSSPosts

.. code:: ipython3

    # znajdowanie procentu postów html w stosunku do łącznej liczby postów każdego roku
    query5 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%html%'
            group by year
            order by year
            """
    
    queryx = client.query(query5)
    htmlPosts = queryx.to_dataframe()
    htmlPosts['posts']= htmlPosts['posts']*100/PostsCount.posts
    pd.to_numeric(htmlPosts['year'])
    htmlPosts

.. code:: ipython3

    # znajdowanie procentu postów JS w stosunku do łącznej liczby postów każdego roku
    query6 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%javascript%'
            group by year
            order by year
            """
    
    queryx = client.query(query6)
    JavaScriptPosts = queryx.to_dataframe()
    JavaScriptPosts['posts']= JavaScriptPosts['posts']*100/PostsCount.posts
    pd.to_numeric(JavaScriptPosts['year'])
    JavaScriptPosts

.. code:: ipython3

    # znajdowanie procentu postów TS w stosunku do łącznej liczby postów każdego roku
    query7 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%typescript%'
            group by year
            order by year
            """
    
    queryx = client.query(query7)
    TypeScriptPosts = queryx.to_dataframe()
    TypeScriptPosts['posts']= TypeScriptPosts['posts']*100/PostsCount.posts
    pd.to_numeric(TypeScriptPosts['year'])
    TypeScriptPosts

.. code:: ipython3

    # znajdowanie procentu postów PHP w stosunku do łącznej liczby postów każdego roku
    query8 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%php%'
            group by year
            order by year
            """
    
    queryx = client.query(query8)
    PHPPosts = queryx.to_dataframe()
    PHPPosts['posts']= PHPPosts['posts']*100/PostsCount.posts
    pd.to_numeric(PHPPosts['year'])
    PHPPosts

.. code:: ipython3

    # znajdowanie procentu postów Ruby w stosunku do łącznej liczby postów każdego roku
    query9 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%ruby%'
            group by year
            order by year
            """
    
    queryx = client.query(query9)
    RubyPosts = queryx.to_dataframe()
    RubyPosts['posts']= RubyPosts['posts']*100/PostsCount.posts
    pd.to_numeric(RubyPosts['year'])
    RubyPosts

.. code:: ipython3

    # prównanie popularności różnych kategorii w ramach Web Development
    WebDev= pd.merge(CSSPosts, htmlPosts, how='inner', on = 'year')
    WebDev=WebDev.set_index('year')
    WebDev=pd.merge(WebDev,JavaScriptPosts,how='inner',on='year')
    WebDev = WebDev.set_index('year')
    WebDev=pd.merge(WebDev,TypeScriptPosts,how='inner',on='year')
    WebDev = WebDev.set_index('year')
    WebDev=pd.merge(WebDev,PHPPosts,how='inner',on='year')
    WebDev = WebDev.set_index('year')
    WebDev=pd.merge(WebDev,RubyPosts,how='inner',on='year')
    WebDev = WebDev.set_index('year')
    
    WebDev.plot(kind='line',figsize=(20,10))
    plt.xlabel('Year', fontsize=15)
    plt.ylabel('Posts %', fontsize=15)
    y_pos=[2012,2013,2014,2015,2016,2017,2018,2019,2020,2021]
    
    plt.xticks(y_pos,fontsize=10)
    plt.yticks(fontsize=10)
    plt.title('Web Development')
    plt.legend(['HTML','CSS','JavaScript','TypeScript','PHP', 'Ruby'],loc=[1.0,0.5])
    plt.show()

.. code:: ipython3

    # znajdowanie odsetka postów związanych z technologiami baz danych
    # w stosunku do łącznej liczby postów każdego roku
    query10 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and (tags like '%mysql%' or tags like '%sqlite%' or tags like '%mongodb%' 
            or tags like '%postgresql%' or tags like '%nosql%')
            group by year
            order by year
            """
    
    queryx = client.query(query10)
    DataBase_Posts  = queryx.to_dataframe()
    DataBase_Posts['posts']= DataBase_Posts['posts']*100/PostsCount.posts
    DataBase_Posts

.. code:: ipython3

    pd.to_numeric(DataBase_Posts['year'])

.. code:: ipython3

    DataBaseYear=DataBase_Posts['year'].values.reshape(-1,1)
    DataBasePosts=DataBase_Posts['posts'].values.reshape(-1,1)
    reg=LinearRegression()
    XDataBase_train, XDataBase_test, yDataBase_train, yDataBase_test = train_test_split(DataBaseYear,DataBasePosts,test_size=0.2,shuffle=False)
    # print(XDataBase_train)
    # print(XDataBase_test)
    # print(yDataBase_train)
    # print(yDataBase_test)
    reg.fit(XDataBase_train,yDataBase_train)
    predictions = reg.predict(XDataBase_test)
    print('Predicted Values:\n',predictions)

.. code:: ipython3

    plt.scatter(XDataBase_train,yDataBase_train, color = "black")
    plt.scatter(XDataBase_test, yDataBase_test, color = "green")
    plt.plot(XDataBase_test, predictions, color = "red")
    plt.gca().legend(('Y-Predicted', 'Y-Train','Y-Test'))
    plt.title('Database Technologies')
    plt.xlabel('Year')
    plt.ylabel('Posts')
    plt.show()

.. code:: ipython3

    plt.scatter(XDataBase_test, yDataBase_test, color = "green")
    plt.plot(XDataBase_test, predictions, color = "red")
    plt.gca().legend(('Y-Train','Y-Test'))
    plt.title('Database Technologies')
    plt.xlabel('Year')
    plt.ylabel('Posts')
    plt.show()

.. code:: ipython3

    # znajdowanie procentu postów MySQL w stosunku do łącznej liczby postów każdego roku
    query11 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%mysql%'
            group by year
            order by year
            """
    
    queryx = client.query(query11)
    MySQLPosts  = queryx.to_dataframe()
    MySQLPosts['posts']= MySQLPosts['posts']*100/PostsCount.posts
    pd.to_numeric(MySQLPosts['year'])
    MySQLPosts

.. code:: ipython3

    # znajdowanie procentu postów SQLite w stosunku do łącznej liczby postów każdego roku
    query12 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%sqlite%'
            group by year
            order by year
            """
    
    queryx = client.query(query12)
    SQLitePosts  = queryx.to_dataframe()
    SQLitePosts['posts']= SQLitePosts['posts']*100/PostsCount.posts
    pd.to_numeric(SQLitePosts['year'])
    SQLitePosts

.. code:: ipython3

    # znajdowanie procentu postów MongoDB w stosunku do łącznej liczby postów każdego roku
    query13 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%mongodb%'
            group by year
            order by year
            """
    
    queryx = client.query(query13)
    MongoDBPosts  = queryx.to_dataframe()
    MongoDBPosts['posts']= MongoDBPosts['posts']*100/PostsCount.posts
    pd.to_numeric(MongoDBPosts['year'])
    MongoDBPosts

.. code:: ipython3

    # znajdowanie procentu postów PostgreSQL w stosunku do łącznej liczby postów każdego roku
    query14 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%postgresql%'
            group by year
            order by year
            """
    
    queryx = client.query(query14)
    PostgreSQLPosts  = queryx.to_dataframe()
    PostgreSQLPosts ['posts']= PostgreSQLPosts ['posts']*100/PostsCount.posts
    pd.to_numeric(PostgreSQLPosts ['year'])
    PostgreSQLPosts 

.. code:: ipython3

    # znajdowanie procentu postów NoSQL w stosunku do łącznej liczby postów każdego roku
    query15 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%nosql%'
            group by year
            order by year
            """
    
    queryx = client.query(query15)
    NoSQLPosts  = queryx.to_dataframe()
    NoSQLPosts['posts']= NoSQLPosts['posts']*100/PostsCount.posts
    pd.to_numeric(NoSQLPosts['year'])
    NoSQLPosts

.. code:: ipython3

    # prównanie popularności różnych kategorii w ramach technologi baz danych
    DataBase= pd.merge(MySQLPosts, SQLitePosts, how='inner', on = 'year')
    DataBase=DataBase.set_index('year')
    DataBase= pd.merge(DataBase, MongoDBPosts, how='inner', on = 'year')
    DataBase=DataBase.set_index('year')
    DataBase= pd.merge(DataBase, PostgreSQLPosts, how='inner', on = 'year')
    DataBase=DataBase.set_index('year')
    DataBase= pd.merge(DataBase, NoSQLPosts, how='inner', on = 'year')
    DataBase=DataBase.set_index('year')
    
    
    DataBase.plot(kind='line',figsize=(20,10))
    plt.xlabel('Year', fontsize=15)
    plt.ylabel('Posts %', fontsize=15)
    y_pos=[2012,2013,2014,2015,2016,2017,2018,2019,2020,2021]
    
    plt.xticks(y_pos,fontsize=10)
    plt.yticks(fontsize=10)
    plt.title('Database Technologies')
    plt.legend(['MySQL','SQLite','MongoDB','PostgreSQL','NoSQL'],loc=[1.0,0.5])
    plt.show()

.. code:: ipython3

    # znajdowanie odsetka postów związanych z technologiami data science
    # w stosunku do łącznej liczby postów każdego roku
    query16 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date)>= 2012 and extract(year from creation_date) < 2022 and (tags like '%tensorflow%' or 
            tags like '%sas%' or tags like '%jupyter%' or tags like '%matlab%' or tags like '%matplotlib%' or tags like '%pytorch%')
            group by year
            order by year
            """
    
    # Set up the query
    queryx = client.query(query16)
    # API request - run the query, and return a pandas DataFrame
    DataScience_Posts  = queryx.to_dataframe()
    DataScience_Posts['posts']= DataScience_Posts['posts']*100/PostsCount.posts
    DataScience_Posts


.. code:: ipython3

    pd.to_numeric(DataScience_Posts['year'])

.. code:: ipython3

    DataScienceYear=DataScience_Posts['year'].values.reshape(-1,1)
    # print (DataScienceYear)
    DataSciencePosts=DataScience_Posts['posts'].values.reshape(-1,1)
    # print (DataSciencePosts)
    reg=LinearRegression()
    XDataScience_train, XDataScience_test, yDataScience_train, yDataScience_test = train_test_split(DataScienceYear,DataSciencePosts,test_size=0.2,shuffle=False)
    # print(XDataScience_train)
    # print(XDataScience_test)
    # print(yDataScience_train)
    # print(yDataScience_test)
    reg=LinearRegression()
    reg.fit(XDataScience_train,yDataScience_train)
    predictions = reg.predict(XDataScience_test)
    print('Predicted Values:\n',predictions)

.. code:: ipython3

    plt.scatter(XDataScience_train,yDataScience_train, color = "black")
    plt.scatter(XDataScience_test, yDataScience_test, color = "green")
    plt.plot(XDataScience_test, predictions, color = "red")
    plt.gca().legend(('Y-Predicted', 'Y-Train','Y-Test'))
    plt.title('Data Science')
    plt.xlabel('Year')
    plt.ylabel('Posts')
    plt.show()

.. code:: ipython3

    plt.scatter(XDataScience_test, yDataScience_test, color = "green")
    plt.plot(XDataScience_test, predictions, color = "red")
    plt.gca().legend(('Y-Train','Y-Test'))
    plt.title('Data Science')
    plt.xlabel('Year')
    plt.ylabel('Posts')
    plt.show()

.. code:: ipython3

    # znajdowanie procentu postów TensorFLow w stosunku do łącznej liczby postów każdego roku
    query17 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%tensorflow%'
            group by year
            order by year
            """
    
    queryx = client.query(query17)
    TensorFlowPosts = queryx.to_dataframe()
    TensorFlowPosts['posts']= TensorFlowPosts['posts']*100/PostsCount.posts
    pd.to_numeric(TensorFlowPosts['year'])
    TensorFlowPosts

.. code:: ipython3

    # znajdowanie procentu postów SAS w stosunku do łącznej liczby postów każdego roku
    query18 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%sas%'
            group by year
            order by year
            """
    
    queryx = client.query(query18)
    sasPosts = queryx.to_dataframe()
    sasPosts['posts']= sasPosts['posts']*100/PostsCount.posts
    pd.to_numeric(sasPosts['year'])
    sasPosts

.. code:: ipython3

    # znajdowanie procentu postów Jupyter w stosunku do łącznej liczby postów każdego roku
    query19 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%jupyter%'
            group by year
            order by year
            """
    
    queryx = client.query(query19)
    JupyterPosts = queryx.to_dataframe()
    JupyterPosts['posts']= JupyterPosts['posts']*100/PostsCount.posts
    pd.to_numeric(JupyterPosts['year'])
    JupyterPosts

.. code:: ipython3

    # znajdowanie procentu postów MATLAB w stosunku do łącznej liczby postów każdego roku
    query20 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%matlab%'
            group by year
            order by year
            """
    
    queryx = client.query(query20)
    matlabPosts = queryx.to_dataframe()
    matlabPosts['posts']= matlabPosts['posts']*100/PostsCount.posts
    pd.to_numeric(matlabPosts['year'])
    matlabPosts

.. code:: ipython3

    # znajdowanie procentu postów Matplotlib w stosunku do łącznej liczby postów każdego roku
    query21 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%matplotlib%'
            group by year
            order by year
            """
    
    queryx = client.query(query21)
    MatplotlibPosts = queryx.to_dataframe()
    MatplotlibPosts['posts']= MatplotlibPosts['posts']*100/PostsCount.posts
    pd.to_numeric(MatplotlibPosts['year'])
    MatplotlibPosts

.. code:: ipython3

    # znajdowanie procentu postów Pytorch w stosunku do łącznej liczby postów każdego roku
    query23 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%pytorch%'
            group by year
            order by year
            """
    
    queryx = client.query(query23)
    PytorchPosts = queryx.to_dataframe()
    PytorchPosts['posts']= PytorchPosts['posts']*100/PostsCount.posts
    pd.to_numeric(PytorchPosts['year'])
    PytorchPosts

.. code:: ipython3

    # prównanie popularności różnych kategorii w ramach technologi data science
    DataScience= pd.merge(TensorFlowPosts, sasPosts, how='inner', on = 'year')
    DataScience=DataScience.set_index('year')
    DataScience= pd.merge(DataScience, JupyterPosts, how='inner', on = 'year')
    DataScience=DataScience.set_index('year')
    DataScience= pd.merge(DataScience, matlabPosts, how='inner', on = 'year')
    DataScience=DataScience.set_index('year')
    DataScience= pd.merge(DataScience, MatplotlibPosts, how='inner', on = 'year')
    DataScience=DataScience.set_index('year')
    
    DataScience= pd.merge(DataScience, PytorchPosts, how='inner', on = 'year')
    DataScience=DataScience.set_index('year')
    
    DataScience.plot(kind='line',figsize=(20,10))
    plt.xlabel('Year', fontsize=15)
    plt.ylabel('Posts %', fontsize=15)
    y_pos=[2016,2017,2018,2019,2020,2021]
    
    plt.xticks(y_pos,fontsize=10)
    plt.yticks(fontsize=10)
    plt.title('Data Science')
    plt.legend(['TensorFlow','SAS','Jupyter','MATLAB','Matplotlib','Pytorch'],loc=[1.0,0.5])

.. code:: ipython3

    # znajdowanie odsetka postów związanych z językami programowania
    # w stosunku do łącznej liczby postów każdego roku
    query24 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >= 2012 and extract(year from creation_date) < 2022 
            and (tags like '%c++%' or tags like '%python%' or tags like '%ruby%' 
            or tags like '%c#%' or tags like '%java%' or tags like '%c%')
            group by year
            order by year
            """
    
    queryx = client.query(query24)
    ProgLang_Posts  = queryx.to_dataframe()
    ProgLang_Posts['posts']=ProgLang_Posts['posts']*100/PostsCount.posts
    ProgLang_Posts

.. code:: ipython3

    pd.to_numeric(ProgLang_Posts['year'])

.. code:: ipython3

    ProgLangYear=ProgLang_Posts['year'].values.reshape(-1,1)
    ProgLangPosts=ProgLang_Posts['posts'].values.reshape(-1,1)
    reg=LinearRegression()
    XProgLang_train, XProgLang_test, yProgLang_train, yProgLang_test = train_test_split(ProgLangYear,ProgLangPosts,test_size=0.2,shuffle=False)
    # print(XProgLang_train)
    # print(XProgLang_test)
    # print(yProgLang_train)
    # print(yProgLang_test)
    reg.fit(XProgLang_train,yProgLang_train)
    predictions = reg.predict(XProgLang_test)
    print('Predicted Values:\n',predictions)

.. code:: ipython3

    plt.scatter(XProgLang_train,yProgLang_train, color = "black")
    plt.scatter(XProgLang_test, yProgLang_test, color = "green")
    plt.plot(XProgLang_test, predictions, color = "red")
    plt.gca().legend(('Y-Predicted', 'Y-Train','Y-Test'))
    plt.title('Programming Languages')
    plt.xlabel('Year')
    plt.ylabel('Posts')
    plt.show()

.. code:: ipython3

    
    plt.scatter(XProgLang_test, yProgLang_test, color = "green")
    plt.plot(XProgLang_test, predictions, color = "red")
    plt.gca().legend(('Y-Train','Y-Test'))
    plt.title('Programming Languages')
    plt.xlabel('Year')
    plt.ylabel('Posts')
    plt.show()

.. code:: ipython3

    # znajdowanie procentu postów C++ w stosunku do łącznej liczby postów każdego roku
    query25 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%c++%'
            group by year
            order by year
            """
    
    queryx = client.query(query25)
    CplusPosts  = queryx.to_dataframe()
    CplusPosts['posts']= CplusPosts['posts']*100/PostsCount.posts
    pd.to_numeric(CplusPosts['year'])
    CplusPosts

.. code:: ipython3

    # znajdowanie procentu postów Python w stosunku do łącznej liczby postów każdego roku
    query26 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%python%'
            group by year
            order by year
            """
    
    queryx = client.query(query26)
    PythonPosts  = queryx.to_dataframe()
    PythonPosts['posts']= PythonPosts['posts']*100/PostsCount.posts
    pd.to_numeric(PythonPosts['year'])
    PythonPosts

.. code:: ipython3

    # znajdowanie procentu postów Ruby w stosunku do łącznej liczby postów każdego roku
    query27 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%ruby%'
            group by year
            order by year
            """
    
    queryx = client.query(query27)
    RubyPosts  = queryx.to_dataframe()
    RubyPosts['posts']= RubyPosts['posts']*100/PostsCount.posts
    pd.to_numeric(RubyPosts['year'])
    RubyPosts

.. code:: ipython3

    # znajdowanie procentu postów C# w stosunku do łącznej liczby postów każdego roku
    query28 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%c#%'
            group by year
            order by year
            """
    
    queryx = client.query(query28)
    CHashPosts  = queryx.to_dataframe()
    CHashPosts['posts']= CHashPosts['posts']*100/PostsCount.posts
    pd.to_numeric(CHashPosts['year'])
    CHashPosts

.. code:: ipython3

    # znajdowanie procentu postów Java w stosunku do łącznej liczby postów każdego roku
    query29 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%java%'
            group by year
            order by year
            """
    
    queryx = client.query(query29)
    JavaPosts  = queryx.to_dataframe()
    JavaPosts['posts']= JavaPosts['posts']*100/PostsCount.posts
    pd.to_numeric(JavaPosts['year'])
    JavaPosts

.. code:: ipython3

    # znajdowanie procentu postów C w stosunku do łącznej liczby postów każdego roku
    query30 = """select EXTRACT(year FROM creation_date) AS year, sum(id) as posts
            from `bigquery-public-data.stackoverflow.posts_questions`
            where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%c'
            group by year
            order by year
            """
    
    queryx = client.query(query30)
    CPosts  = queryx.to_dataframe()
    CPosts['posts']= CPosts['posts']*100/PostsCount.posts
    pd.to_numeric(CPosts['year'])
    CPosts

.. code:: ipython3

    # prównanie popularności różnych kategorii w ramach języków programowania
    ProgLang= pd.merge(CplusPosts, PythonPosts, how='inner', on = 'year')
    ProgLang =ProgLang.set_index('year')
    ProgLang= pd.merge(ProgLang, RubyPosts, how='inner', on = 'year')
    ProgLang =ProgLang.set_index('year')
    ProgLang=pd.merge(ProgLang,CHashPosts,how='inner',on='year')
    ProgLang = ProgLang.set_index('year')
    ProgLang=pd.merge(ProgLang,JavaPosts,how='inner',on='year')
    ProgLang = ProgLang.set_index('year')
    ProgLang=pd.merge(ProgLang,CPosts,how='inner',on='year')
    ProgLang = ProgLang.set_index('year')
    
    ProgLang.plot(kind='line',figsize=(20,10))
    plt.xlabel('Year', fontsize=15)
    plt.ylabel('Posts %', fontsize=15)
    y_pos=[2012,2013,2014,2015,2016,2017,2018,2019,2020,2021]
    
    plt.xticks(y_pos,fontsize=10)
    plt.yticks(fontsize=10)
    plt.title('Programming Languages')
    plt.legend(['C++','Python','Ruby','C#','Java','C'],loc=[1.0,0.5])
    plt.show()

.. code:: ipython3

    # porównanie przeszłych trendów różnych kategorii
    PastTrends= pd.merge(WebDev_Posts, DataBase_Posts, how='inner', on = 'year')
    PastTrends =PastTrends.set_index('year')
    PastTrends=pd.merge(PastTrends,DataScience_Posts,how='inner',on='year')
    PastTrends = PastTrends.set_index('year')
    PastTrends=pd.merge(PastTrends,ProgLang_Posts,how='inner',on='year')
    PastTrends = PastTrends.set_index('year')
    
    PastTrends.plot(kind='line',figsize=(20,10))
    plt.xlabel('Year', fontsize=15)
    plt.ylabel('Posts %', fontsize=15)
    y_pos=[2012,2013,2014,2015,2016,2017,2018,2019,2020,2021]
    
    plt.xticks(y_pos,fontsize=10)
    plt.yticks(fontsize=10)
    plt.title('Past Trends')
    plt.legend(['Web Development','DataBase Technologies','Data Science','Programming Languages'],
               loc=[1.0,0.5])
    plt.show()

.. code:: ipython3

    # porównanie przyszłych trendów różnych kategorii
    #służy do tworzenia wizualizacji wykresów skumulowanych dla dowolnej technologii w celu porównania trendów między nimi
    def trends(dfall, labels=None, Year = 2022, title="Trends in Technologies in "):
        plt.figure(figsize=(20,10))
        predict = []
        for df in dfall :
            year=df['year'].values.reshape(-1,1)
            posts=df['posts'].values.reshape(-1,1)
            reg=LinearRegression()
            X_train = year
            Y_train = posts
            X_test = [[Year]]
            reg.fit(X_train,Y_train)
            predictions = reg.predict(X_test)
            predict.append(float(predictions))
            #print(predict)
    
    
        trend = pd.DataFrame(columns = ['Technology','Posts %'])
        trend['Technology'] = labels
        trend['Posts %'] =  predict
    
        
        y_pos = np.arange(len(trend['Technology']))
        plt.bar(y_pos,trend['Posts %'])
        plt.xticks(y_pos,trend['Technology'],fontsize=15)
        plt.yticks(fontsize=15)
        plt.xlabel('Technologies',fontsize=20)
        plt.ylabel('Posts %',fontsize=20)
        plt.title(title+str(Year),fontsize=30)
        plt.show()

.. code:: ipython3

    trends([WebDev_Posts, DataBase_Posts, DataScience_Posts, ProgLang_Posts],
           ['Web Development','DataBase Technologies','Data Science','Programming Languages'])

.. code:: ipython3

    #funkcja pobiera listę tagów, dla których szukamy przeszłe trendy
    #następnie scalamy je w jeden wykres danych 
    def PastTrends(dfall, labels = None, title="Past Trends"):
    
        query1 = "select EXTRACT(year FROM creation_date) AS year, sum(id) as posts from `bigquery-public-data.stackoverflow.posts_questions` where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2022 and tags like '%"
        query3 ="%' group by year order by year"
        df = []
        
        if labels==None:
            labels = dfall
            
        l = len(dfall)
        for i in range(l):
            query2 = dfall[i]
            query = query1+query2+query3
            queryx = client.query(query)
            Posts  = queryx.to_dataframe()
            Posts['posts']= Posts['posts']*100/PostsCount.posts
            pd.to_numeric(Posts['year'])
            df.append(Posts)
        
        trend = pd.merge(df[0], df[1], how='inner', on = 'year')
        trend = trend.set_index('year')
        if(l>2):
            for i in range(2,l):
                trend = pd.merge(trend, df[i], how='inner', on = 'year')
                trend = trend.set_index('year')
                
        trend.plot(kind='line',figsize=(20,10))
        plt.xlabel('Year', fontsize=15)
        plt.ylabel('Posts %', fontsize=15)
        y_pos=[2012,2013,2014,2015,2016,2017,2018,2019,2020,2021]
        plt.xticks(y_pos,fontsize=10)
        plt.yticks(fontsize=10)
        plt.title(title)
        plt.legend(labels, loc=[1.0,0.5])
        plt.show()

.. code:: ipython3

    PastTrends(["blockchain","javascript","python","java","kotlin"])

.. code:: ipython3

    #pobiera listę tagów, dla których szukamy przyszłe trendy
    #dla każdego z nich budowany jest model regresji liniowej
    def FutureTrends(dfall, Year = 2032, labels = None, title="Trends in Technologies in "):
    
        plt.figure(figsize=(20,10))
        
        query1 = "select EXTRACT(year FROM creation_date) AS year, sum(id) as posts from `bigquery-public-data.stackoverflow.posts_questions` where extract(year from creation_date) >=2012 and extract(year from creation_date) < 2021 and tags like '%"
        query3 ="%' group by year order by year"
        df = []
        l = len(dfall)
        
        if (labels==None):
            labels = dfall
            
        for i in range(l):
            query2 = dfall[i]
            query = query1+query2+query3
            queryx = client.query(query)
            Posts  = queryx.to_dataframe()
            Posts['posts']= Posts['posts']*100/PostsCount.posts
            pd.to_numeric(Posts['year'])
            df.append(Posts)
            
        predict = []
        for d in df:
            year=d['year'].values.reshape(-1,1)
            posts=d['posts'].values.reshape(-1,1)
            reg=LinearRegression()
            X_train = year
            Y_train = posts
            X_test = [[Year]]
            reg.fit(X_train,Y_train)
            predictions = reg.predict(X_test)
            predict.append(float(predictions))
        print(predict)
        
        trend = pd.DataFrame(columns = ['Technology','Posts %'])
        trend['Technology'] = labels
        trend['Posts %'] = predict
        
        y_pos = np.arange(len(trend['Technology']))
        plt.bar(y_pos,trend['Posts %'])
        plt.xticks(y_pos, trend['Technology'],fontsize=15)
        plt.yticks(fontsize=15)
        plt.xlabel('Technologies',fontsize=20)
        plt.ylabel('Posts %',fontsize=20)
        plt.title(title+str(Year),fontsize=30)
        plt.show()

.. code:: ipython3

    FutureTrends(["blockchain","javascript","python","java","kotlin"])
